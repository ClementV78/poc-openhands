name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set lowercase owner name
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:latest
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Run tests
      - name: Run tests
        run: |
          echo "üß™ Running tests..."
          echo "‚úÖ Build completed successfully"
          echo "üì¶ Docker image pushed to GHCR"
          echo "üéØ Ready for manual deployment with: kubectl apply -R -f k8s/base/"
          # Add your test commands here when ready:
          # docker run --rm ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }} pytest

      # Summary
      - name: Deployment Instructions
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üöÄ Build completed! To deploy locally:"
          echo ""
          echo "1. Pull the new image:"
          echo "   docker pull ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}"
          echo ""
          echo "2. Deploy to your local K3s cluster:"
          echo "   export IMAGE_TAG=\"${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}\""
          echo "   envsubst < k8s/base/app/deployment.yaml | kubectl apply -f -"
          echo "   kubectl apply -R -f k8s/base/"
          echo ""
          echo "3. Check rollout status:"
          echo "   kubectl rollout status deployment/app -n prompt2prod"

  # Self-hosted runner deployment
  deploy-self-hosted:
    needs: build-test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to K3s
        run: |
          # Test kubectl connection (should work on self-hosted runner)
          echo "üîç Testing cluster connectivity..."
          kubectl cluster-info

          # Update image tag in deployment
          export IMAGE_TAG="${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}"
          envsubst < k8s/base/app/deployment.yaml | kubectl apply -f -

          # Apply all manifests
          kubectl apply -R -f k8s/base/

          # Wait for rollout
          kubectl rollout status deployment/app -n prompt2prod --timeout=5m

          # Show status
          kubectl get pods -n prompt2prod -o wide

  # Codespace deployment with K3s container (lightweight Alpine)
  deploy-codespace:
    needs: build-test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install k3d
        run: |
          curl -s https://raw.githubusercontent.com/k3d-io/k3d/main/install.sh | bash

      - name: Start K3d cluster
        run: |
          echo "üöÄ Starting k3d cluster..."
          k3d cluster create ci \
            --servers 1 \
            --agents 1 \
            --wait

          # Export kubeconfig for later steps
          export KUBECONFIG=$(k3d kubeconfig write ci)
          echo "KUBECONFIG=$KUBECONFIG" >> $GITHUB_ENV

          kubectl cluster-info
          kubectl get nodes -o wide

      - name: Setup KGateway
        run: |
          echo "‚öôÔ∏è Installing KGateway..."
          ./scripts/setup-kgateway.sh
          kubectl wait --for=condition=available --timeout=300s deployment/kgateway -n kgateway-system

      - name: Deploy Application
        run: |
          echo "üì¶ Deploying application..."
          kubectl create namespace prompt2prod --dry-run=client -o yaml | kubectl apply -f -

          # Secret OpenAI (optionnel si besoin)
          kubectl create secret generic openai-secret \
            --from-literal=Authorization=${{ secrets.OPENAI_API_KEY }} \
            -n prompt2prod --dry-run=client -o yaml | kubectl apply -f -

          export IMAGE_TAG="${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}"
          envsubst < k8s/base/app/deployment.yaml | kubectl apply -f -

          kubectl apply -R -f k8s/base/

          # Boucle de surveillance
          SECONDS=0
          TIMEOUT=600
          while [ $SECONDS -lt $TIMEOUT ]; do
            echo "‚è≥ $(date +%T) - √âtat des pods dans prompt2prod:"
            kubectl get pods -n prompt2prod -o wide
            echo "--------------------------------------"

            # V√©rifie si un pod est en erreur
            if kubectl get pods -n prompt2prod | grep -E 'Error|CrashLoopBackOff|ImagePullBackOff'; then
              echo "‚ùå Un pod est en erreur, debug..."
              kubectl describe pods -n prompt2prod || true
              kubectl get events -n prompt2prod --sort-by=.lastTimestamp | tail -20 || true
              # R√©cup√©rer logs du pod en erreur (si possible)
              for pod in $(kubectl get pods -n prompt2prod --no-headers | grep -E 'Error|CrashLoopBackOff|ImagePullBackOff' | awk '{print $1}'); do
                echo "üîç Logs du pod $pod"
                kubectl logs -n prompt2prod $pod || true
              done
              exit 1
            fi

            # V√©rifie si le d√©ploiement est pr√™t
            if kubectl rollout status deployment/app -n prompt2prod --timeout=5s; then
              echo "‚úÖ D√©ploiement r√©ussi"
              exit 0
            fi

            sleep 10
          done

          echo "‚è∞ Timeout de $TIMEOUT secondes atteint sans succ√®s du d√©ploiement"
          kubectl describe deployment app -n prompt2prod || true
          kubectl describe pods -n prompt2prod || true
          exit 1

      - name: Show Deployment Status
        run: |
          echo "‚úÖ Deployment completed!"
          kubectl get pods -n prompt2prod -o wide
          kubectl get services -n prompt2prod

      - name: Cleanup cluster
        if: always()
        run: |
          echo "üßπ Cleaning up k3d cluster..."
          k3d cluster delete ci
