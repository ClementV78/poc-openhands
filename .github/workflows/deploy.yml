name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set lowercase owner name
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:latest
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Run tests
      - name: Run tests
        run: |
          echo "🧪 Running tests..."
          echo "✅ Build completed successfully"
          echo "📦 Docker image pushed to GHCR"
          echo "🎯 Ready for manual deployment with: kubectl apply -R -f k8s/base/"
          # Add your test commands here when ready:
          # docker run --rm ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }} pytest

      # Summary
      - name: Deployment Instructions
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "🚀 Build completed! To deploy locally:"
          echo ""
          echo "1. Pull the new image:"
          echo "   docker pull ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}"
          echo ""
          echo "2. Deploy to your local K3s cluster:"
          echo "   export IMAGE_TAG=\"${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}\""
          echo "   envsubst < k8s/base/app/deployment.yaml | kubectl apply -f -"
          echo "   kubectl apply -R -f k8s/base/"
          echo ""
          echo "3. Check rollout status:"
          echo "   kubectl rollout status deployment/app -n prompt2prod"

      # COMMENTED OUT: Deploy to K3s (for self-hosted runner later)
      # Uncomment this section when using self-hosted runner with local K3s access
      - name: Deploy to K3s
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          # Setup kubectl
          mkdir -p $HOME/.kube
          echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config

          # Install Helm if not present
          if ! command -v helm &> /dev/null; then
            curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          fi

          # Test kubectl connection first
          echo "🔍 Testing cluster connectivity..."
          kubectl cluster-info --request-timeout=30s || {
            echo "❌ Cannot connect to Kubernetes cluster"
            echo "Cluster info:"
            kubectl config current-context || echo "No context available"
            exit 1
          }

          # Install Gateway API CRDs if not present
          if ! kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null; then
            echo "📋 Installing Gateway API CRDs..."
            kubectl apply --validate=false -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/standard-install.yaml
            kubectl wait --for=condition=Established crd/gateways.gateway.networking.k8s.io --timeout=60s
          fi

          # Install/upgrade KGateway with AI extension
          echo "🚀 Installing KGateway with AI support..."
          helm upgrade -i --create-namespace --namespace kgateway-system \
            --version v2.0.4 \
            --set gateway.aiExtension.enabled=true \
            kgateway-crds \
            oci://cr.kgateway.dev/kgateway-dev/charts/kgateway-crds
            
          helm upgrade -i --namespace kgateway-system \
            --version v2.0.4 \
            --set gateway.aiExtension.enabled=true \
            kgateway \
            oci://cr.kgateway.dev/kgateway-dev/charts/kgateway
            
          # Wait for KGateway to be ready
          kubectl wait --for=condition=ready pod \
            -l app.kubernetes.io/name=kgateway \
            -n kgateway-system \
            --timeout=120s || true

          # Update image tag in deployment
          export IMAGE_TAG="${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}"
          envsubst < k8s/base/app/deployment.yaml | kubectl apply -f -

          # Apply all other manifests
          kubectl apply -R -f k8s/base/ --ignore-not-found=true

          # Wait for rollout
          kubectl rollout status deployment/app -n prompt2prod --timeout=5m || true

          # Show status
          kubectl get pods -n prompt2prod
          kubectl get pods -n kgateway-system
