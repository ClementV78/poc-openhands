name: Build and Deploy

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
    # Checkout du code
    - name: Checkout repository
      uses: actions/checkout@v4
    
    # Set lowercase owner name
    - name: set lower case owner name
      run: |
        echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
      env:
        OWNER: '${{ github.repository_owner }}'
    
    # Setup Docker Buildx
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    # Login to GitHub Container Registry
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    # Build and push Docker image
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./docker/Dockerfile
        push: ${{ github.event_name != 'pull_request' }}
        tags: |
          ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:latest
          ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    # Run tests
    - name: Run tests
      run: |
        echo "ðŸ§ª Running tests..."
        # Add your test commands here
        # docker run --rm ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }} npm test
    
    # Deploy to K3s (only on main)
    - name: Deploy to K3s
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        # Setup kubectl
        mkdir -p $HOME/.kube
        echo "${{ secrets.KUBECONFIG }}" | base64 -d > $HOME/.kube/config
        
        # Install Helm if not present
        if ! command -v helm &> /dev/null; then
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
        fi
        
        # Install Gateway API CRDs if not present
        if ! kubectl get crd gateways.gateway.networking.k8s.io &> /dev/null; then
          echo "ðŸ“‹ Installing Gateway API CRDs..."
          kubectl apply -f https://github.com/kubernetes-sigs/gateway-api/releases/download/v1.3.0/standard-install.yaml
          kubectl wait --for=condition=Established crd/gateways.gateway.networking.k8s.io --timeout=60s
        fi
        
        # Install/upgrade KGateway with AI extension
        echo "ðŸš€ Installing KGateway with AI support..."
        helm upgrade -i --create-namespace --namespace kgateway-system \
          --version v2.0.4 \
          --set gateway.aiExtension.enabled=true \
          kgateway-crds \
          oci://cr.kgateway.dev/kgateway-dev/charts/kgateway-crds
          
        helm upgrade -i --namespace kgateway-system \
          --version v2.0.4 \
          --set gateway.aiExtension.enabled=true \
          kgateway \
          oci://cr.kgateway.dev/kgateway-dev/charts/kgateway
          
        # Wait for KGateway to be ready
        kubectl wait --for=condition=ready pod \
          -l app.kubernetes.io/name=kgateway \
          -n kgateway-system \
          --timeout=120s || true
        
        # Update image tag in deployment
        export IMAGE_TAG="${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}"
        envsubst < k8s/base/app/deployment.yaml | kubectl apply -f -
        
        # Apply all other manifests
        kubectl apply -R -f k8s/base/ --ignore-not-found=true
        
        # Wait for rollout
        kubectl rollout status deployment/app -n prompt2prod --timeout=5m || true
        
        # Show status
        kubectl get pods -n prompt2prod
        kubectl get pods -n kgateway-system
