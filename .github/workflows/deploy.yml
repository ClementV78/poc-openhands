name: Build and Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io

jobs:
  build-test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      # Checkout du code
      - name: Checkout repository
        uses: actions/checkout@v4

      # Set lowercase owner name
      - name: set lower case owner name
        run: |
          echo "OWNER_LC=${OWNER,,}" >>${GITHUB_ENV}
        env:
          OWNER: "${{ github.repository_owner }}"

      # Setup Docker Buildx
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Login to GitHub Container Registry
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Build and push Docker image
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: |
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:latest
            ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      # Run tests
      - name: Run tests
        run: |
          echo "üß™ Running tests..."
          echo "‚úÖ Build completed successfully"
          echo "üì¶ Docker image pushed to GHCR"
          echo "üéØ Ready for manual deployment with: kubectl apply -R -f k8s/base/"
          # Add your test commands here when ready:
          # docker run --rm ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }} pytest

      # Summary
      - name: Deployment Instructions
        if: github.ref == 'refs/heads/main' && github.event_name == 'push'
        run: |
          echo "üöÄ Build completed! To deploy locally:"
          echo ""
          echo "1. Pull the new image:"
          echo "   docker pull ${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}"
          echo ""
          echo "2. Deploy to your local K3s cluster:"
          echo "   export IMAGE_TAG=\"${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}\""
          echo "   envsubst < k8s/base/app/deployment.yaml | kubectl apply -f -"
          echo "   kubectl apply -R -f k8s/base/"
          echo ""
          echo "3. Check rollout status:"
          echo "   kubectl rollout status deployment/app -n prompt2prod"

  # Self-hosted runner deployment
  deploy-self-hosted:
    needs: build-test
    runs-on: self-hosted
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Deploy to K3s
        run: |
          # Test kubectl connection (should work on self-hosted runner)
          echo "üîç Testing cluster connectivity..."
          kubectl cluster-info

          # Update image tag in deployment
          export IMAGE_TAG="${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}"
          envsubst < k8s/base/app/deployment.yaml | kubectl apply -f -

          # Apply all manifests
          kubectl apply -R -f k8s/base/

          # Wait for rollout
          kubectl rollout status deployment/app -n prompt2prod --timeout=5m

          # Show status
          kubectl get pods -n prompt2prod -o wide

  # Codespace deployment with K3s container
  deploy-codespace:
    needs: build-test
    runs-on: ubuntu-latest
    container:
      image: rancher/k3s:v1.33.4-k3s1
      options: --privileged
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    steps:
      - name: Install Node.js and Git
        run: |
          apk add --no-cache nodejs npm git
          
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Start K3s
        run: |
          echo "üöÄ Starting K3s server..."
          k3s server --disable traefik --write-kubeconfig-mode 644 &
          sleep 20
          
          # Setup kubectl config
          export KUBECONFIG=/etc/rancher/k3s/k3s.yaml
          echo "KUBECONFIG=/etc/rancher/k3s/k3s.yaml" >> $GITHUB_ENV
          
          # Wait for node ready
          kubectl wait --for=condition=Ready nodes --all --timeout=300s
          kubectl cluster-info

      - name: Setup KGateway
        run: |
          echo "‚öôÔ∏è Installing KGateway..."
          ./scripts/setup-kgateway.sh
          kubectl wait --for=condition=available --timeout=300s deployment/kgateway-controller -n kgateway-system

      - name: Deploy Application
        run: |
          echo "üì¶ Deploying to Codespace K3s..."
          
          # Update image tag
          export IMAGE_TAG="${{ env.REGISTRY }}/${{ env.OWNER_LC }}/prompt2prod:${{ github.sha }}"
          envsubst < k8s/base/app/deployment.yaml | kubectl apply -f -

          # Apply manifests
          kubectl apply -R -f k8s/base/

          # Wait for deployment
          kubectl rollout status deployment/app -n prompt2prod --timeout=10m

      - name: Show Deployment Status
        run: |
          echo "‚úÖ Codespace deployment completed!"
          kubectl get pods -n prompt2prod -o wide
          kubectl get services -n prompt2prod
